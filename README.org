#+OPTIONS: broken-links:t
* Music Player Android workshop
** Introduction 
This document gives a step-by-step instructions on implementing a simple music player as an Android service.
** Slides
Accompanying slides can be found [[AndroidKotlin.pdf][here.]]

** Assignments
*** Start and stop playback when clicking the =PLAY= and =STOP= buttons
Let's start (and stop) the playback when the user clicks on the appropriate buttons.

  - In =MainActivity=, similarly to the way this is done with =startServiceButton= and =stopServiceButton=, define on click behaviour for =playButton= and =stopButton=.
  - These implementations should simply call functions =play()= and =stop()=. (Hint, look at the code that is used to add behavior to =startServiceButton= and =stopServiceButton=.)

    Notice that while the application works, it behaves unpredictably. (The playback stops when the users rotates the phone, closes the screen, or switches to another application; you may need to do these actions multiple times, before the playback stops, but it will stop eventually.)

*** Stop playback when the activity pauses
The reason for such behavior is that when you rotate the screen, your =MainActivity= instance gets destroyed (together with the =MediaPlayer= instance which stops the playback). While the playback may 'survive' few initial screen rotations (and other configuration changes), it will stop eventually. The proper way of handling this is to manually stop the playback whenever the activity configuration changes. To stop the playback:

  - Override the implementation of =MainActivity.onPause()=,
  - manually stop the playback by calling =stop()=,
  - and release the player instance by calling =player?.release()=.

Now the playback should stop on all instances mentioned above.

*** Implement the music player as a service
However, we want the playback to continue even if the user switches to another applications, rotates or dims the screen (presses the power button). To that end, we are going to implement the player as a service.
**** Add a service
- Right click on the =app= module and select =New>Service>Service=.
- As the name write =MusicService=.
- Remove the tick in the =Exported= option; we do not want that our music service is instantiated by other android applications.
**** Move the player code into service
Next, we will gradually migrate all player code into the service. Initially, the service will automatically play the music when started. We will add explicit controls later on. Make the following modifications:

- Add a constant member variable of type =MediaPlayer= to =MusicService= and immediately instantiate it: =val player = MediaPlayer()=
- Override method =MusicService.onDestroy= and inside release the =MediaPlayer= instance.
- Create companion object in =MusicService= with =TAG= field and change =TAG= references to point to =MusicService=
- Move =play()= and =stop()= methods from =MainActivity= to =MusicService=:
  - Also, comment out the code that changes =TextView= objects since that code cannot be used from the service.
  - Also in =MainActivity=, comment out all calls to methods =play= and =stop=.
- Move method =getFiles()= from =MainActivity= to =MusicService=.
- Override =MusicService.onStartCommand= by adding the following behavior:
  - the call to method =play()=;
  - the return of value =START_STICKY=.
- In =MainActivity=, remove all references to the =player= instance as well as all calls to =start()= and =stop()=.
- In =MainActivity.onCreate()= change the behavior of =startServiceButton= so that it starts the service instead of showing the Toast message. The service is started by making the =Intent= instance and calling the =startService= method as shown below.
#+BEGIN_SRC java
val intent = Intent(this@MainActivity, MusicService::class.java)
startService(intent)
#+END_SRC
- Similarly, in =MainActivity.onCreate= change the behavior of =stopServiceButton= so that it stops the service instead of showing the message. The service is stopped as shown below.
#+BEGIN_SRC java
stopService(Intent(this@MainActivity, MusicService::class.java))
#+END_SRC

If you now press the =startServiceButton=, notice how the playback starts and it does not stop if you rotate the screen, switch to another application, or dim the screen. The playback stops only if you stop the service with the =stopServiceButton= or, after a while, if you remove the application from the application drawer.
*** Bind activity to the service
While running the playback in a service is an improvement, the current solution is a bit awkward. In particular, we have very little control over the service. For instance, the playback starts as the service is created, and the only way to stop it, is to stop the service. It would be much better if we could have more fine-grained control over playback. To that end, we will *bind* to the service from the activity. This requires making changes to both =MusicService= and =MainActivity=.
**** Make service return a =Binder= instance
When we bind to the service the Android system will asynchronously return a =Binder= instance. We'll create a type of a =Binder= implementation, named =LocalBinder=, that will hold a reference to the instance of =MusicService=.
***** Add class =LocalBinder=
Inside our =MusicService=, define the =LocalBinder= as a static inner class. Use the following code.
#+BEGIN_SRC java
// an implementation of Binder interface
internal class LocalBinder(val service: MusicService) : Binder()

// a reference to LocalBinder
private val binder = LocalBinder(this)
#+END_SRC
***** Implement =onBind= to return the service instance
Next, make =MusicService.onBind()= return the binder instance whenever we bind to the service.
#+BEGIN_SRC java
override fun onBind(intent: Intent): IBinder = binder
#+END_SRC
***** Update the =MusicService.onStartCommand()=
Finally, to stop the automatic playback upon service creation, remove the call to =play()= inside =MusicService.onStartCommand()=.
*** Bind to the service in the =MainActivity=
The =MainActivity= now has to bind to the service whenever the service is running. To know whether a binding is active and to have a reference to the service, we'll begin by defining a reference to the =MusicService= instance.
**** Create a reference to the =MusicService= instance inside =MainActivity=
This instance will be used to determine whether the =MainActivity= is bounded to the service
#+BEGIN_SRC java
private var service: MusicService? = null
#+END_SRC
The =null= value should denote the absence of a binding.
**** Implement a =ServiceConnection= object that handles =onServiceConnected()= and =onServiceDisconnected()= events
When we bind to the service (from the =MainActivity=), we receive an asynchronous callback denoting whether the connection has been established. If the connection has been established, we can cast the =IBinder= instance into =MusicService.LocalBinder= and read the =service= member variable. Having this reference allows us to control the service with much finer granularity.
#+BEGIN_SRC java
private val connection: ServiceConnection = object : ServiceConnection {
    override fun onServiceConnected(name: ComponentName, service: IBinder) {
        Log.i(TAG, "onServiceConnected()")
        this@MainActivity.service = (service as LocalBinder).service
    }

    override fun onServiceDisconnected(name: ComponentName) {
        Log.i(TAG, "onServiceDisconnected()")
        service = null
    }
}
#+END_SRC
**** Add behaviors to buttons: =play=, =stop=, =startService=, and =stopService=
Finally, we now have to change the behavior of the buttons that start and stop the service and start and stop the playback. Change the contents inside the =MainActivity.onCreate()= to contain the following snippets. Note how all service calls are guarded will =null= checks using the =?= operator; if the =service= is =null= certain actions should not be called because they would raise =NullPointerException=.
#+BEGIN_SRC java
binding.playButton.setOnClickListener { service?.play() }
binding.stopButton.setOnClickListener { service?.stop() }
binding.startServiceButton.setOnClickListener {
    val intent = Intent(this@MainActivity, MusicService::class.java)
    startService(intent)
    bindService(intent, connection, BIND_AUTO_CREATE)
}
binding.stopServiceButton.setOnClickListener {
    service?.let {
        unbindService(connection)
        service = null
        stopService(Intent(this@MainActivity, MusicService::class.java))
    }
}
#+END_SRC
To the start playback, first start the service and then press the play button. Now, you can stop the playback with stop and restart it by pressing the play again. Note that the service was not destroyed and created during this start/stop/start cycle, but you directly controlled the =MediaPlayer= instance by calling the =service.start()= and =service.stop()= methods.

However, there is still a small issue: if you start the playback (start the service and then the playback) and rotate the screen, the music will continue to play, however, the start and stop button will stop working. 

**** Unbind when activity gets destroyed and bind on start if the service is already running
The issue above is caused by an Android configuration change. When you rotate the screen, the activity and all of its member variables get destroyed and then recreated with their default values. So when you rotate the screen, the =service= instance in the newly created =MainActivity= is set to =null= and the binding to the service is lost; the existing button references point to object that no longer exist.

We'll fix this by manually (i) unbinding from service whenever the activity is stopped, and (ii) binding to the service whenever the activity is started (if the service is running). To unbind when the activity is stopped, override the =MainActivity.onStop()= method.
#+BEGIN_SRC java
override fun onStop() {
    Log.i(TAG, "onStop()")
    service?.let {
        unbindService(connection)
        service = null
    }
    super.onStop()
}
#+END_SRC

To bind to the service when the activity is started, override the =MainActivity.onStart()= and bind to the service, but only if the service is running. To find out whether the =MusicService= is running, use the method given below.
#+BEGIN_SRC java
override fun onStart() {
    super.onStart()
    Log.i(TAG, "onStart()")
    if (isServiceRunning()) {
        bindService(
            Intent(this@MainActivity, MusicService::class.java),
            connection,
            BIND_AUTO_CREATE
        )
    }
}

/** Returns true iff the MusicService service is running */
@Suppress("DEPRECATION")
private fun isServiceRunning(): Boolean =
    (getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager)
        .getRunningServices(Int.MAX_VALUE)
        .any { it.service.className == MusicService::class.java.canonicalName }
#+END_SRC

Doing this fixes the broken start and play buttons.

At this stage, we are only missing the communication between the service and the activity. Right now we can control the service from the activity (by calling the methods on the =service= instance), but there are cases when the service needs to send a message to the activity on itself. For instance, to tell the name of the song that is playing, or to signal how far the current song has been played.
*** Send the name of the song with a local broadcast
One way of sending messages between Android components is to use [[https://developer.android.com/guide/components/broadcasts.html][broadcasts.]] Since in our case all components are part of the same application, we shall use local broadcasts.
**** Set up a variable that holds the name of the song in service
First, we'll set-up a member variable inside =MusicService= that will hold the name of the song that is being played.
#+BEGIN_SRC java
// holds the name of the song currently being played
var song = ""
#+END_SRC
Then, change the implementations of =MusicService.play()= and =MusicService.stop()= to set the value of this member variable appropriately.

Inside =MusicService.play()= simply add line =song = this= after =it.start()=.

At the end of =MusicService.stop()= add line =this.song = " "= after =it.reset()=.
**** Set up a =LocalBroadcastReceiver= to send a message whenever a playback starts
Now, whenever the playback starts (or stops) we shall broadcast the name of the song with the help of a local broadcast. Let's define a helper method that sends a local broadcast message.
#+BEGIN_SRC java
private fun broadcastSongName() {
    val intent = Intent("mplayer") // mplayer is the name of the broadcast
    intent.putExtra("song", song) // song name is added as the parameter
    LocalBroadcastManager.getInstance(this).sendBroadcast(intent) // the broadcast is sent
}
#+END_SRC

To send a local broadcast when the song starts or stops, call the method above at the end of the =MusicService.play()= and =MusicService.stop()=:
#+BEGIN_SRC java
broadcastSongName()
#+END_SRC
**** Subscribe (and unsubscribe) to broadcasts in =MainActivity=
Finally, we have to subscribe to these broadcasts in =MainActivity=. But first we have to define what happens when a broadcast is received. We do this by implementing a =BroadcastReceiver=. Ad the following code inside the =MainActivity=.
#+BEGIN_SRC java
private val receiver: BroadcastReceiver = object : BroadcastReceiver() {
    override fun onReceive(context: Context?, intent: Intent?) {
        binding.musicInfoTextView.text = intent?.getStringExtra("song")
    }
}
#+END_SRC
This code simply reads the =song= parameter from the =Intent= that came with the local broadcast and writes its value to the =musicInfoTextView=.

To avoid memory leaks we should be subscribed to broadcasts only when the activity is active. So it makes sense to subscribe in =MainActivity.onStart()= and unsubscribe in =MainActivity.onStop()=.
#+BEGIN_SRC java
override fun onStart() {
    super.onStart()
    Log.i(TAG, "onStart()")
    if (isServiceRunning()) {
        bindService(
            Intent(this@MainActivity, MusicService::class.java),
            connection,
            BIND_AUTO_CREATE
        )
    }
    LocalBroadcastManager.getInstance(this).registerReceiver(receiver, IntentFilter("mplayer"))
}
#+END_SRC
Note that the parameter to the =IntentFilter= is the same string which is used in =MusicService= when sending the broadcast. And to unsubscribe when the activity is stopped, make the =MainActivity.onStop()= contain the following code.
#+BEGIN_SRC java
override fun onStop() {
    Log.i(TAG, "onStop()")
    service?.let {
        unbindService(connection)
        service = null
    }
    LocalBroadcastManager.getInstance(this).unregisterReceiver(receiver)
    super.onStop()
}
#+END_SRC

Notice that now whenever you start the playback, the name of the song is displayed in the =TextView= in the middle of the screen. When the playback is stopped, the song name disappears.

However, there are a few bugs left. For instance, if you start the playback and rotate the screen, the song name goes away. Or if you start the playback and terminate the service directly by pressing the stop service button, the song name remains.

To fix the first issue, we have to ensure that when the UI is redrawn (e.g. after an Activity is recreated after a rotation), we get the song name directly from the service. Put the follwing line in =onServiceConnected= :
#+BEGIN_SRC java
binding.musicInfoTextView.text = this@MainActivity.service?.song
#+END_SRC

To fix the second issue, we have to manually clear the song name once the service is stopped. The following code should go at the end of the =stopServiceButton= onClick callback:
#+BEGIN_SRC java
binding.musicInfoTextView.text = ""
#+END_SRC

*** Display playback progress
Next to the track title, we want to show the progress of the playback in minutes and seconds. A TextView =songProgressTextView= is already present in the layout, yet is, by default, hidden. Go to the layout and delete the line setting =android:visibility= to "invisible" from the view.

The =MediaPlayer= object has a property =currentPosition= which gives us the progress time in milliseconds. We will update =songProgressTextView= every second, to reflect the actual time that has passed since the song started playing. For repeated tasks that are executed with a short period and do not need to be executed when the app is in the background, a =Handler= + =Runnable= is an appropriate solution. The =Runnable= will define a task we want to execute, while the =Handler= will ensure the task is exectued with a given periodicity.

In =MainActivity= we first define a member variable =handler=:
#+BEGIN_SRC java
private val handler = android.os.Handler(Looper.getMainLooper())
#+END_SRC

Then, we will instantiate an object that implements =Runnable=, queries the current playback position, and shows the results in =songProgressTextView=:
#+BEGIN_SRC java
private val updateTimeRunnable = object : Runnable {
  override fun run() {
    service?.player?.let {
      if (it.isPlaying) {
        val elapsed = it.currentPosition / 1000
        val minutes = elapsed / 60
        val seconds = elapsed % 60
        binding.songProgressTextView.text = String.format(Locale.getDefault(), "%02d:%02d", minutes, seconds)
      }
    }
    handler.postDelayed(this, 1000)
  }
}
#+END_SRC

This has to be executed every second when the UI is shown to the user and =MainActivity= is bound to =MusicService=. Thus, in =onServiceConnected= add:
#+BEGIN_SRC java
handler.post(updateTimeRunnable)
#+END_SRC

Finally, we should stop updating the UI when we unbind from the service. We unbind from the service in =onStop= and in =stopServiceButton.setOnClickListener=. Add the following line to these two:
#+BEGIN_SRC java
handler.removeCallbacks(updateTimeRunnable)
#+END_SRC
In addition, set the =songProgressTextView.text= to "00:00" in =stopServiceButton.setOnClickListener=.

*** Convert Service to Foreground Service
Our service is now playing music even if the app is not actively used by the user. However, there are two issues with the current implementation. First, any background service can be killed the OS at an arbitrary time to preserve the device's resources. Second, once the app is not actively used, the user does not have readily available information on which app is playing the music, which song is being played, etc. To fix this, we will convert our service to a foreground service. Such services in Android are used for long-running tasks and are less likely to be killed by the OS. In addition, such services should show a notification in a notification bar, thus the user is well aware of which services are running.

First, change the service starting code in =MainActivity= to:
#+BEGIN_SRC java
startForegroundService
#+END_SRC

We will now define the notification that will be shown when the service is playing music. For this we first have to create the notification channel. In =MusicService= add the following code:
#+BEGIN_SRC java
private fun createNotificationChannel() {
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
    val channel = NotificationChannel(
      "music_channel",
      "Music Playback",
      NotificationManager.IMPORTANCE_LOW
      )
    val manager = getSystemService(NotificationManager::class.java)
    manager?.createNotificationChannel(channel)
  }
}
#+END_SRC

Next, create another method in =MusicService= that will actually move the service to the foreground and show the notification in the notification bar:
#+BEGIN_SRC java
private fun startForegroundService() {
  createNotificationChannel()

  val intent = Intent(this, MainActivity::class.java)
  val pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_IMMUTABLE)

  val notification = NotificationCompat.Builder(this, "music_channel")
    .setContentTitle("Music Player")
    .setContentText("Playing: $song")
    .setSmallIcon(android.R.drawable.ic_media_play)
    .setPriority(NotificationCompat.PRIORITY_LOW)
    .setContentIntent(pendingIntent)
    .build()

  startForeground(1, notification)
}
#+END_SRC

When to call this method? One appropriate moment could be when a song starts playing. Thus, put =startForegroundService()= at the end of =getFiles().random().apply { }=.

Finally, we need to modify =AndroidManifest.xml= to refelect the fact that our service will be a foreground service. Add =android:foregroundServiceType= property to =<service>= tag in the manifest. Set it to the right type (note: types can be found at [[https://developer.android.com/develop/background-work/services/fgs/service-types]]), which in our case is =mediaPlayback=. In addition, the manifest should list the following permissions that your app needs =android.permission.FOREGROUND_SERVICE=, =android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK=, and =android.permission.POST_NOTIFICATIONS=.

That's it - before testing your code, don't forget to handle permission asking for =android.permission.POST_NOTIFICATIONS=!

** Attribution
All MP3 songs used in this project were obtained from [[https://www.bensound.com/royalty-free-music][bensound.com]] under creative commons license.

This content is based on the assignment originally developed by David Jelenc and Veljko Pejovic for the Tetramax Android Programming workshop held in Ljubljana, Slovenia in April 2021.
